// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Package "kth-node-redis" (1) has an async function [1;37mas default export[0m which - when used w/o arguments - [0;32mresolves[0m with a Redis client [-> check snapshot 1]: > RedisClient "default" < 1`] = `
RedisClient {
  "_events": Object {
    "connect": [Function],
    "end": [Function],
    "error": [Function],
    "ready": [Function],
    "reconnecting": [Function],
    "warning": [Function],
  },
  "_eventsCount": 6,
  "_maxListeners": undefined,
  "_redisMock": RedisMock {
    "_databases": Array [
      RedisDb {
        "storage": Object {},
      },
      RedisDb {
        "storage": Object {},
      },
      RedisDb {
        "storage": Object {},
      },
      RedisDb {
        "storage": Object {},
      },
      RedisDb {
        "storage": Object {},
      },
      RedisDb {
        "storage": Object {},
      },
      RedisDb {
        "storage": Object {},
      },
      RedisDb {
        "storage": Object {},
      },
      RedisDb {
        "storage": Object {},
      },
      RedisDb {
        "storage": Object {},
      },
      RedisDb {
        "storage": Object {},
      },
      RedisDb {
        "storage": Object {},
      },
      RedisDb {
        "storage": Object {},
      },
      RedisDb {
        "storage": Object {},
      },
      RedisDb {
        "storage": Object {},
      },
      RedisDb {
        "storage": Object {},
      },
    ],
    "_events": Object {
      "message": Array [
        [Function],
        [Function],
        [Function],
      ],
    },
    "_eventsCount": 1,
    "_maxListeners": undefined,
    Symbol(kCapture): false,
  },
  "_selectedDbIndex": 0,
  "connected": true,
  "log": Object {
    "debug": [MockFunction] {
      "calls": Array [
        Array [
          "kth-node-redis: Redis using client: default",
        ],
        Array [
          "kth-node-redis: Redis connected: default",
          Object {
            "event": "connect",
          },
        ],
        Array [
          "kth-node-redis: Redis server version: n/a",
        ],
        Array [
          "kth-node-redis: Redis connected: testName1",
          Object {
            "event": "connect",
          },
        ],
        Array [
          "kth-node-redis: Redis server version: n/a",
        ],
        Array [
          "kth-node-redis: Redis connected: testName2",
          Object {
            "event": "connect",
          },
        ],
        Array [
          "kth-node-redis: Redis server version: n/a",
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
        Object {
          "type": "return",
          "value": undefined,
        },
        Object {
          "type": "return",
          "value": undefined,
        },
        Object {
          "type": "return",
          "value": undefined,
        },
        Object {
          "type": "return",
          "value": undefined,
        },
        Object {
          "type": "return",
          "value": undefined,
        },
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    },
    "error": [MockFunction],
    "fatal": [MockFunction],
    "info": [MockFunction] {
      "calls": Array [
        Array [
          "kth-node-redis: Redis client ready: default",
          Object {
            "event": "ready",
          },
        ],
        Array [
          "kth-node-redis: Redis client ready: testName1",
          Object {
            "event": "ready",
          },
        ],
        Array [
          "kth-node-redis: Redis client ready: testName2",
          Object {
            "event": "ready",
          },
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
        Object {
          "type": "return",
          "value": undefined,
        },
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    },
    "warn": [MockFunction],
  },
  "options": Object {
    "host": "127.0.0.1",
    "port": 6379,
    "retry_strategy": [Function],
  },
  "psubscriptions": Object {},
  "pub_sub_mode": false,
  "ready": true,
  "stream": null,
  "subscriptions": Object {},
  Symbol(kCapture): false,
}
`;

exports[`Package "kth-node-redis" (1) has an async function [1;37mas default export[0m which - when used with "name" and "options" - [0;32mresolves[0m with a Redis client [-> check snapshot 2]: > RedisClient "testName" < 1`] = `
RedisClient {
  "_events": Object {
    "connect": [Function],
    "end": [Function],
    "error": [Function],
    "ready": [Function],
    "reconnecting": [Function],
    "warning": [Function],
  },
  "_eventsCount": 6,
  "_maxListeners": undefined,
  "_redisMock": RedisMock {
    "_databases": Array [
      RedisDb {
        "storage": Object {},
      },
      RedisDb {
        "storage": Object {},
      },
      RedisDb {
        "storage": Object {},
      },
      RedisDb {
        "storage": Object {},
      },
      RedisDb {
        "storage": Object {},
      },
      RedisDb {
        "storage": Object {},
      },
      RedisDb {
        "storage": Object {},
      },
      RedisDb {
        "storage": Object {},
      },
      RedisDb {
        "storage": Object {},
      },
      RedisDb {
        "storage": Object {},
      },
      RedisDb {
        "storage": Object {},
      },
      RedisDb {
        "storage": Object {},
      },
      RedisDb {
        "storage": Object {},
      },
      RedisDb {
        "storage": Object {},
      },
      RedisDb {
        "storage": Object {},
      },
      RedisDb {
        "storage": Object {},
      },
    ],
    "_events": Object {
      "message": Array [
        [Function],
        [Function],
        [Function],
        [Function],
        [Function],
      ],
    },
    "_eventsCount": 1,
    "_maxListeners": undefined,
    Symbol(kCapture): false,
  },
  "_selectedDbIndex": 0,
  "connected": true,
  "log": Object {
    "debug": [MockFunction] {
      "calls": Array [
        Array [
          "kth-node-redis: Redis clients",
          Object {
            "clients": Array [
              "default",
              "testName",
            ],
          },
        ],
        Array [
          "kth-node-redis: Redis connected: testName",
          Object {
            "event": "connect",
          },
        ],
        Array [
          "kth-node-redis: Redis server version: n/a",
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
        Object {
          "type": "return",
          "value": undefined,
        },
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    },
    "error": [MockFunction],
    "fatal": [MockFunction],
    "info": [MockFunction] {
      "calls": Array [
        Array [
          "kth-node-redis: Redis client ready: testName",
          Object {
            "event": "ready",
          },
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    },
    "warn": [MockFunction],
  },
  "options": Object {
    "host": "127.0.0.1",
    "port": 6379,
    "retry_strategy": [Function],
  },
  "psubscriptions": Object {},
  "pub_sub_mode": false,
  "ready": true,
  "stream": null,
  "subscriptions": Object {},
  Symbol(kCapture): false,
}
`;
